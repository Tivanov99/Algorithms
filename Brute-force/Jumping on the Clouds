using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'jumpingOnClouds' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY c as parameter.
     */

    public static int jumpingOnClouds(List<int> c)
    {
            List<int> result = FindPath(c, 0, 0, new List<int>());
            int Result = GetMinMoves(result);
            return Result;
    }
    static List<int> FindPath(List<int> clouds, int index, int movesCount, List<int> currentPath)
        {
            for (int i = index; i < clouds.Count - 1; i++)
            {
                if (IsSafe(clouds, index, i + 1))
                {
                    FindPath(clouds, index + 1, movesCount + 1, currentPath);
                }
                if (IsSafe(clouds, index, i + 2))
                {
                    FindPath(clouds, index + 2, movesCount + 1, currentPath);
                }
                return currentPath;
            }
            currentPath.Add(movesCount);
            return currentPath;
        }
        static bool IsSafe(List<int> clouds, int index, int nextIndex)
        {
            if (index < clouds.Count - 1 && nextIndex <= clouds.Count - 1 && clouds                     [nextIndex] == 0)
            {
                return true;
            }
            return false;
        }
        static int GetMinMoves(List<int> moves)
        {
            int minValue = int.MaxValue;
            for (int i = 0; i < moves.Count; i++)
            {
                if (moves[i] < minValue)
                {
                    minValue = moves[i];
                }
            }
            return minValue;
        }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> c = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(cTemp => Convert.ToInt32(cTemp)).ToList();

        int result = Result.jumpingOnClouds(c);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
